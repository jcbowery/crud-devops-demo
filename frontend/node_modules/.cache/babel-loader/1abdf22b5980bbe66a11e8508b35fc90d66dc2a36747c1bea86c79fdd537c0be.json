{"ast":null,"code":"var _jsxFileName = \"/home/josh/Dev/crud-devops-demo/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Import React and hooks\nimport axios from 'axios'; // Import Axios for API requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State for storing users fetched from the backend\n  const [users, setUsers] = useState([]);\n  // State for the input field to add a new user\n  const [name, setName] = useState('');\n\n  // Fetch users when the component mounts\n  useEffect(() => {\n    axios.get('http://localhost:3000/users').then(res => setUsers(res.data));\n  }, []); // Empty array means run once on mount\n\n  // Add a new user via the API\n  const addUser = async () => {\n    const res = await axios.post('http://localhost:3000/users', {\n      name\n    }); // Post new user\n    setUsers([...users, res.data]); // Update users list\n    setName(''); // Clear input field\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addUser,\n      children: \"Add User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: user.name\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IvMMVGptum+rEOc4AeQkT23RiXw=\");\n_c = App;\nexport default App; // Export the component\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","users","setUsers","name","setName","get","then","res","data","addUser","post","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","map","user","id","_c","$RefreshReg$"],"sources":["/home/josh/Dev/crud-devops-demo/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Import React and hooks\nimport axios from 'axios'; // Import Axios for API requests\n\nfunction App() {\n  // State for storing users fetched from the backend\n  const [users, setUsers] = useState([]);\n  // State for the input field to add a new user\n  const [name, setName] = useState('');\n\n  // Fetch users when the component mounts\n  useEffect(() => {\n    axios.get('http://localhost:3000/users').then(res => setUsers(res.data));\n  }, []); // Empty array means run once on mount\n\n  // Add a new user via the API\n  const addUser = async () => {\n    const res = await axios.post('http://localhost:3000/users', { name }); // Post new user\n    setUsers([...users, res.data]); // Update users list\n    setName(''); // Clear input field\n  };\n\n  return (\n    <div>\n      <h1>Users</h1>\n      {/* Input for new user name */}\n      <input value={name} onChange={e => setName(e.target.value)} />\n      {/* Button to add user */}\n      <button onClick={addUser}>Add User</button>\n      {/* List all users */}\n      <ul>{users.map(user => <li key={user.id}>{user.name}</li>)}</ul>\n    </div>\n  );\n}\n\nexport default App; // Export the component\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;AACpD,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACdC,KAAK,CAACS,GAAG,CAAC,6BAA6B,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIL,QAAQ,CAACK,GAAG,CAACC,IAAI,CAAC,CAAC;EAC1E,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAMF,GAAG,GAAG,MAAMX,KAAK,CAACc,IAAI,CAAC,6BAA6B,EAAE;MAAEP;IAAK,CAAC,CAAC,CAAC,CAAC;IACvED,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEM,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChCJ,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;EACf,CAAC;EAED,oBACEN,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEdjB,OAAA;MAAOkB,KAAK,EAAEb,IAAK;MAACc,QAAQ,EAAEC,CAAC,IAAId,OAAO,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE9DjB,OAAA;MAAQsB,OAAO,EAAEX,OAAQ;MAAAE,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE3CjB,OAAA;MAAAa,QAAA,EAAKV,KAAK,CAACoB,GAAG,CAACC,IAAI,iBAAIxB,OAAA;QAAAa,QAAA,EAAmBW,IAAI,CAACnB;MAAI,GAAnBmB,IAAI,CAACC,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEV;AAACf,EAAA,CA7BQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA+BZ,eAAeA,GAAG,CAAC,CAAC;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}